/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Slot } from "./Slot";
import { SlotCountArgs } from "./SlotCountArgs";
import { SlotFindManyArgs } from "./SlotFindManyArgs";
import { SlotFindUniqueArgs } from "./SlotFindUniqueArgs";
import { CreateSlotArgs } from "./CreateSlotArgs";
import { UpdateSlotArgs } from "./UpdateSlotArgs";
import { DeleteSlotArgs } from "./DeleteSlotArgs";
import { ReservationFindManyArgs } from "../../reservation/base/ReservationFindManyArgs";
import { Reservation } from "../../reservation/base/Reservation";
import { SlotService } from "../slot.service";
@graphql.Resolver(() => Slot)
export class SlotResolverBase {
  constructor(protected readonly service: SlotService) {}

  async _slotsMeta(
    @graphql.Args() args: SlotCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Slot])
  async slots(@graphql.Args() args: SlotFindManyArgs): Promise<Slot[]> {
    return this.service.slots(args);
  }

  @graphql.Query(() => Slot, { nullable: true })
  async slot(@graphql.Args() args: SlotFindUniqueArgs): Promise<Slot | null> {
    const result = await this.service.slot(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Slot)
  async createSlot(@graphql.Args() args: CreateSlotArgs): Promise<Slot> {
    return await this.service.createSlot({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Slot)
  async updateSlot(@graphql.Args() args: UpdateSlotArgs): Promise<Slot | null> {
    try {
      return await this.service.updateSlot({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Slot)
  async deleteSlot(@graphql.Args() args: DeleteSlotArgs): Promise<Slot | null> {
    try {
      return await this.service.deleteSlot(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Reservation], { name: "reservations" })
  async findReservations(
    @graphql.Parent() parent: Slot,
    @graphql.Args() args: ReservationFindManyArgs
  ): Promise<Reservation[]> {
    const results = await this.service.findReservations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
